1) Почитать про принципы программирования KISS, DRY, YAGNI + почитать про "Антипаттерны" Чистого кода

KISS («Keep it simple, stupid» - «Делай проще, тупица»), принцип утверждает, что большинство систем работают лучше всего, если они остаются простыми, а не усложняются. Поэтому в области проектирования простота должна быть одной из ключевых целей и следует избегать ненужной сложности.

DRY (Don’t repeat yourself - «не повторяйся») — это принцип разработки программного обеспечения, нацеленный на снижение повторения информации различного рода, особенно в системах со множеством слоёв абстрагирования.

YAGNI (You Aren’t Gonna Need It - «Вам это не понадобится») принцип программирования при котором в качестве основной цели и/или ценности декларируется отказ от избыточной функциональности, — то есть отказ добавления функциональности, в которой нет непосредственной надобности.

"Антипаттерны" Чистого кода.

Copy and paste ("Копирование и вставка"). При такой методологии программирования могут появится некоторые  проблемы. Во-первых, отсутствие декомпозиции, и, как следствие, отсутствие шаринга кода. Если придется что-то менять, то придется менять во всех местах, куда «накопипастил» программист. Во-вторых, после копирования, программист частенько забывает внести в копию полностью все изменения.

Spaghetti ("Спагетти-код"). Так называется расползание кода на одном этаже программы. Для этого антипаттерна характерны функции очень большого размера. Причина этого заключается в полнейшем отсутствии какой-либо декомпозиции.

Golden hammer ("Золотой молоток"). Это применение какого-то конкретного паттерна для решения всех возможных и невозможных задач.

Magic numbers ("Магические цифры"). Данный антипаттерн затрудняет понимание программы и усложняет ее рефакторинг. Вместо магических чисел следует использовать переменные и константы, имеющие семантически верные имена.

Magic strings ("Магические строчки") - это прописывание в коде строковых значений для сравнения с какими-либо параметрами.

Reinventing the wheel ("Изобретение колеса"). Смысл антипаттерна состоит в том, что программист разрабатывает собственное решение, в то время как существуют не менее, а зачастую и более достойные аналоги.

Lava flow ("Поток лавы"). Код, который имеет избыточные или некачественные части, которые кажутся неотъемлемой частью программы, но программист не до конца понимаем, что он делает или как он влияет на все приложение. Это делает рискованным удаление. Это обычно происходит с устаревшим кодом, или когда код был написан кем-то другим (обычно без надлежащей документации), или когда проект слишком быстро перешел с этапа разработки на этап производства.

Premature optimization ("Преждевременная оптимизация). Оптимизацией кода следует заниматься только в случаях крайней необходимости, и только после того, как оптимизируемый инструмент полностью готов к работе, а оптимизируемый участок кода жестко инкапсулирован от всего окружающего мира.

Лодочный якорь (Boat Anchor). Когда программисты оставляют неиспользуемый код в базе, потому что он может понадобиться им позже.

Божественный объект (God Object). Такой объект берет на себя слишком много функций и/или хранит в себе практически все данные.


2) Прочитать про способы хранения LocalStorage, SessionStorage и Cookie

Local Storage

Данные хранятся в формате ключ-значение. Значения хранятся в виде строк. При попытке сохранения других типов данных, они будут приведены к строке.
Объем хранимых данных до 5 Мб.
Является бессрочным хранилищем данных, но браузеры могут вводить ограничения.

Session Storage

Похож на LocalStorage, но данные хранятся только в течение сессии. Сессия страницы создаётся при открытии новой вкладки браузера и остается активной до тех пор, пока открыта вкладка, состояние сессии сохраняется между перезагрузками. Открытие новой вкладки с таким же адресом приведёт к созданию новой сессии.

Cookie
Данные, хранящиеся в куках, передаются на сервер в виде HTTP-заголовка и могут быть им изменены, они передаются при каждом запросе к серверу. Их размер 4 Кб. Срок хранения данных по умолчанию ограничен длинной сессии, для продления хранения кук используется дополнительный параметр. Как правило, куки пользуются для хранения авторизационных данных или когда доступ к записанным данным нужен на сервере, так же используются для отслеживания поведения пользователя на сайте.

3) HTML / CSS - Базовая структура html документа, БЭМ методология.

Базовая структура html документа

<!DOCTYPE html> - всегда идет в самом начале веб-страницы, необходим для указания типа текущего документа, также помимо этого браузер понимает какая версия html используется (в данном случае HTML5). 
<html lang="ru"> - тег html сообщает браузер, где начинается контент, который необходимо обработать как HTML. 
Атрибута lang указывает язык, на котором отображается веб-страница.
<head> - тег <head> служит для хранения метаданных (название страницы, описание, ключевые слова и т.д.).
<meta charset="UTF-8"> - кодировка документа.
<meta name="viewport" content="width=device-width"> - устанавливает ширину области просмотра равной ширине экрана.
<title></title> - заголовок страницы.
</head> - закрывающий тег шапки документа. Так же в <head> содержатся: стили документа - <link rel="stylesheet" href="styles.css">, скрипты - <script src="js/switch.js"></script>.
<body></body> -  содержит отображаемый контент.
</html> - закрывающий тег корневого элемента.

БЭМ методология.

БЭМ (Блок, Элемент, Модификатор) — компонентный подход к веб-разработке, в основе которого лежит принцип разделения интерфейса на независимые блоки.

БЭМ включает в себя:

Методологические рекомендации по разработке сайтов — простые советы по организации проекта, который нужно сделать быстро, а поддерживать долгие годы.
Технологии и библиотеки с открытым исходным кодом — готовая реализация рекомендаций БЭМ.
Инструменты для автоматизации работы с методологией БЭМ, разработан в Яндексе получив международное признание.

Блок - функционально независимый компонент страницы, который может быть повторно использован. Название блока характеризует смысл, а не состояние.
- Блок не должен влиять на свое окружение, т. е. блоку не следует задавать внешнюю геометрию (в виде отступов, границ, влияющих на размеры) и позиционирование.

- В CSS по БЭМ также не рекомендуется использовать селекторы по тегам или id.

Элемент - cоставная часть блока, которая не может использоваться в отрыве от него.
- Название элемента характеризует смысл, а не состояние.
- Структура полного имени элемента соответствует схеме:имя-блока__имя-элемента. Имя элемента отделяется от имени блока двумя подчеркиваниями (__).

Модификатор - Cущность, определяющая внешний вид, состояние или поведение блока либо элемента. 

- Название модификатора характеризует внешний вид, состояние и поведение.

- Имя модификатора отделяется от имени блока или элемента одним подчеркиванием (_)

4) Почитать про паттерны функционального программирования + посмотреть примеры использования.

В функциональном программировании данные неизменяемы, а функции отображают их на другие данные. Это позволяет создавать чистые функции, которые не имеют побочных эффектов и проще поддаются тестированию и сопровождению.

1. Data immutability ("Неизменяемость данных")
В функциональном программировании данные неизменяемы. Это означает, что при изменении данных создается новый объект, а старый остается неизменным.

2. Pure Functions ("Чистые функции").
Чистые функции - это функции, которые не имеют побочных эффектов и всегда возвращают одинаковый результат при одинаковых входных данных. Пример: function pureFn (a, b) {
  return a + b
}

3. Function Composition ("Композиция функций").
Композиция функций - это процесс объединения нескольких функций в одну. Это позволяет создавать более сложные функции и повторно использовать код. Кроме того, композиция функций улучшает читаемость кода и позволяет избежать дублирования кода. Пример: const composedFunction = compose(func1, func2, func3);

4. Higher-Order Functions ("Функции высшего порядка").
Функции высшего порядка - это функции, которые принимают другие функции в качестве аргументов или возвращают функции в качестве результата. Это позволяет создавать более абстрактный код и повышать его гибкость. Пример: map, filter, reduce.

5. Recursion ("Рекурсия")
Рекурсия - это процесс, при котором функция вызывает саму себя. В функциональном программировании рекурсия является основным способом повторения операций. Она позволяет создавать более элегантный и краткий код.

6. Каррирование (Currying)
Процесс преобразования функции с несколькими аргументами в последовательность функций, каждая из которых принимает только один аргумент.
Пример: const add = a => b => a + b;

5) Способы позиционирования контента на странице.

Для позиционирования контента на странице используется CSS-свойство position.

Оно определяет, где находится элемент на веб-странице.

Значения свойства position:

Static — значение по умолчанию, элемент позиционируется в соответствии с его местом в потоке документа.
Relative — элемент позиционируется относительно своего исходного положения в потоке документа.
Absolute — элемент позиционируется относительно ближайшего родительского элемента, который имеет позиционирование, отличное от static.
Fixed — элемент позиционируется относительно окна браузера.
Sticky — элемент остаётся на месте при прокрутке страницы, но при этом может быть отодвинут от своей стандартной позиции.

6) Веса селекторов.

наименьший вес: селекторы типа (h1) и псевдоэлементы (::before)
малый вес: селекторы класса (.title), атрибута ([type="radio"]) и псевдоклассы (:hover);
средний вес: селекторы ID (#title);
большой вес: встроенные стили 

Комбинаторы +, >, ~, универсальный селектор * и псевдокласс :where() веса не имеют.
Псевдоклассы :is(), :has() и :not() принимают вес наиболее специфичного селектора внутри скобок.

Ключевое слово !important нарушает естественную работу специфичности и каскада, насильно применяя свойство, после которого написано. Если к элементу применимы два взаимоисключающих стиля с модификатором !important, то применён будет стиль с большей специфичностью.